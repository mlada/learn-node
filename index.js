const fs = require('fs');const path = require('path');// pathconst catalogPath = '/Users/mlada/Downloads/VK audio/';const downloadPath = '/Users/mlada/Downloads/';const newCatalogPath = '/Users/mlada/Music/Sorted';const outputPath = __dirname + '/output/';const fileType = /.mp3/i;const zipPath = '/Users/mlada/Zip/Sorted';var dataMsg;function toLog(msg) {    console.log(msg)    return dataMsg = dataMsg + msg;}function createPath(path) {    path        .split('/')        .reduce((currentPath, folder) => {            currentPath += folder + '/';            if (!fs.existsSync(currentPath)){                fs.mkdirSync(currentPath);            }            return currentPath;        }, '');}function sortLib(currentPath,newPath,file) {    createPath(newPath);    fs.readdir(currentPath, (err, files) => {        if (err) {            toLog('readdir ', err);        }        files.forEach((item) => {            if (fs.lstatSync(path.join(currentPath, item)).isDirectory()) {                const callPath = currentPath + '/' + item;                sortLib(callPath, newPath, file);            } else {                if (item.match(file) != null) {                    //для всех аудио в корневой                    //создаем подпапки                    var elementNewPath = newPath + '/' + item.substring(0, 1);                    fs.mkdir(path.join(elementNewPath), (err) => {                        if (err) {                            toLog('папка существует ', err);                        };                        fs.copyFile(path.join(currentPath, item), path.join(elementNewPath, item), (err) => {                            if (err) {                                toLog('copyFile ', err);                            }                        });                        fs.unlink(path.join(currentPath, item), (err) => {                            if (err) {                                toLog('unlink ', err);                            }                            ;                        });                    });                }            }        });    });};sortLib(downloadPath,zipPath,fileType);